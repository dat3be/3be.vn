new ClipboardJS('.btn-copied');

var clipboard = new ClipboardJS('.btn-copied');

clipboard.on('success', function(e) {
    Swal.fire({
        icon: "success",
        text: "Successfully copied to memory.",
        confirmButtonText: `OK, got it`
    })
    e.clearSelection();
});

clipboard.on('error', function(e) {
    Swal.fire({
        icon: "error",
        text: "Copy failed.",
        confirmButtonText: `OK, got it`
    })
});

const swal = (text, icon) => {
    Swal.fire({
        icon: icon,
        text: text,
        confirmButtonText: `OK, got it`
    })
}

const URL_REQUEST = "/dapi/composite/v1/public/services/request";

const signUp = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "signup",
        name: $('input[name="name"]').val(),
        email: $('input[name="email"]').val(),
        username: $('input[name="username"]').val(),
        password: $('input[name="password"]').val(),
        terms: $('input[name="terms"]').val(),
    }).then((response) => {
        let result = response.data;
        
        result.resultCode === 0 ? Swal.fire({
            icon: 'success',
            text: result.message,
            confirmButtonText: `OK, got it`
        }) && setTimeout(() => window.location.href = result.extraData.redirectUrl, 1000) : Swal.fire({
            icon: 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

const signIn = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "signin",
        username: $('input[name="username"]').val(),
        password: $('input[name="password"]').val(),
    }).then((response) => {
        let result = response.data;
        
        result.resultCode === 0 ? Swal.fire({
            icon: 'success',
            text: result.message,
            confirmButtonText: `OK, got it`
        }) && setTimeout(() => window.location.href = result.extraData.redirectUrl, 1000) : Swal.fire({
            icon: 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

const forgotPassword = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "forgot-password",
        email: $('input[name="email"]').val(),
    }).then((response) => {
        let result = response.data;
        
        result.resultCode === 0 ? Swal.fire({
            icon: 'success',
            text: result.message,
            confirmButtonText: `OK, got it`
        }) && setTimeout(() => window.location.href = result.extraData.redirectUrl, 1000) : Swal.fire({
            icon: 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

const findNamebyMail = () => {
    $('.display-username').show();
    $('.name').val(`Đang xử lý...`);

    axios.post("/dapi/composite/v1/private/account/user/find-name-by-email", {
        email: $('input[name="email"]').val()
    }).then(result => {
        let response = result.data;

        if (response.resultCode === 0) {
            $('.name').val(`${response.extraData.name}`);
        } else {
            swal(
                response.message,
                response.resultCode === 0 ? "success" : "error"
            );
        }
    }).catch(error => {
        swal(error.message, "error");
    });
}

const changeCurrency = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "change-currency",
        currency: $('.sl-currency').val()
    }).then((response) => {
        let result = response.data;
        
        if(result.resultCode === 0) {
            setTimeout(() => window.location.reload())
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

const changeTimeZone = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "change-timezone",
        timeZone: $('.ipt-timezone').val()
    }).then((response) => {
        let result = response.data;
        
        if(result.resultCode === 0) {
            setTimeout(() => window.location.reload())
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

const changePassword = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "change-password",
        current_password: $('input[name="current_password"]').val(),
        new_password: $('input[name="new_password"]').val(),
        confirm_password: $('input[name="confirm_password"]').val(),
    }).then((response) => {
        let result = response.data;

        Swal.fire({
            icon: result.resultCode === 0 ? 'success' : 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })

        if(result.resultCode === 0) {
            setTimeout(() => window.location.reload())
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

const generateKey = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "gerenate-key",
        apiKey: apiKey
    }).then((response) => {
        let result = response.data;

        if(result.resultCode === 0) {
            $("#apiKey").val(`${result.apiKey}`)
        } else {
            Swal.fire({
                icon: 'error',
                text: result.message,
                confirmButtonText: `OK, got it`
            });
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

$('.2fa-generate').on('click', (e) => {
    e.preventDefault();

    KTApp.showPageLoading();

    axios.post($("#2fa-generate-form").attr("action"), {
        apiKey: apiKey
    }).then((response) => {
        let result = response.data;

        Swal.fire({
            icon: result.resultCode === 0 ? 'success' : 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })

        if(result.resultCode === 0) {
            $("#2fa-generate-form").hide()
            $("#2fa-approve-form").show()
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
})

$('#2fa-approve-form').on('submit', (e) => {
    e.preventDefault();

    KTApp.showPageLoading();

    axios.post($("#2fa-approve-form").attr("action"), {
        apiKey: apiKey,
        code: $("#2fa-approve-form input[name=code]").val()
    }).then((response) => {
        let result = response.data;

        Swal.fire({
            icon: result.resultCode === 0 ? 'success' : 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })

        if(result.resultCode === 0) {
            setTimeout(() => window.location.reload(), 2000)
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
})

const createTicket = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "create-ticket",
        method: $('select[name="method"]').val(),
        subject: $('input[name="subject"]').val(),
        content: $('textarea[name="content"]').val(),
    }).then((response) => {
        let result = response.data;

        Swal.fire({
            icon: result.resultCode === 0 ? 'success' : 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })

        if(result.resultCode === 0) {
            setTimeout(() => window.location.reload())
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

$(document).ready(function () {
    KTApp.showPageLoading();
    
    axios.post("/dapi/composite/v1/private/tickets/single")
    .then((response) => {
        let result = response.data;

        if(result.resultCode === 0) {
            if(result.extraData.length > 0) {
                $(result.extraData).each((key, val) => {
                    $(".ticket_list").append(`
                    <div class="card bg-secondary my-4" onclick="otherTicket('${val.commandId}');">
                        <div class="card-body p-3">
                            <div class="row">
                                <div class="col-auto">
                                    <div class="symbol symbol-45px symbol-circle" data-bs-toggle="tooltip" aria-label="${val.username}" data-bs-original-title="${val.username}" data-kt-initialized="1">
                                        <img src="https://ui-avatars.com/api/?background=random&name=${val.username}" alt="user">
                                    </div>
                                </div>
                                <div class="col ps-0">
                                    <div class="row">
                                        <div class="col align-self-center">
                                            <h5 class="mb-1">
                                                <span class="fw-bold text-dark">${val.subject}</span>
                                            </h5>
                                            <span class="text-gray-800 fw-semibold fs-7">
                                                <i class="fas fa-clock me-1"></i> ${moment(val.createdAt).format('YYYY-MM-DD HH:mm:ss')}
                                            </span>
                                        </div>
                                        <div class="col-auto align-self-center">
                                            <span class="align-items-center"><i class="fa-solid fa-circle-chevron-right fs-4"></i></i></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    `)
                })
            } else {
                $(".ticket_list").append(` <div class="text-center"><div class="image"><img src="/build/images/storage/empty.png" alt="Rỗng"></div></div>`)
            }
        }   
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading())
})

const otherTicket = (commandId) => {
    KTApp.showPageLoading();

    axios.post("/dapi/composite/v1/private/tickets/messages", {
        commandId: commandId
    }).then((response) => {
        let result = response.data;

        if (result.resultCode === 0) {
            if (result.extraData.length > 0) {
                $(".syncMessage").html("");

                $(result.extraData).each((key, value) => {
                    const messageHtml = `
                        <div class="card-body p-0">
                            <div class="scroll-y me-n5 pe-5 h-300px h-lg-auto" data-kt-element="messages" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-="auto" data-kt-scroll-dependencies="#kt_header, #kt_app_header, #kt_app_toolbar, #kt_toolbar, #kt_footer, #kt_app_footer, #kt_chat_messenger_header, #kt_chat_messenger_footer" data-kt-scroll-wrappers="#kt_content, #kt_app_content, #kt_chat_messenger_body" data-kt-scroll-offset="5px" style="">
                                ${
                                value.type === "0" 
                                ? `<div class="d-flex justify-content-end mb-5">
                                    <div class="d-flex flex-column align-items-end">
                                        <div class="d-flex align-items-center mb-2">
                                            <div class="me-3">
                                                <span class="text-muted fs-7 mb-1">${moment(value.createdAt).fromNow()}</span>
                                                <div class="fs-5 fw-bold text-gray-900 me-1">${value.username}</div>
                                            </div>
                                            <div class="symbol symbol-35px symbol-circle">
                                                <img alt="Pic" src="https://ui-avatars.com/api/?background=random&name=${value.username}">
                                            </div>
                                        </div>
                                        <div class="p-5 rounded bg-primary text-white fw-bold mw-lg-450px text-end" data-kt-element="message-text">${value.content}</div>
                                    </div>
                                </div>`
                                : `<div class="d-flex justify-content-start mb-5">
                                    <div class="d-flex flex-column align-items-start">
                                        <div class="d-flex align-items-center mb-2">
                                            <div class="symbol symbol-35px symbol-circle">
                                                <img alt="Pic" src="https://ui-avatars.com/api/?background=random&name=${value.username}">
                                            </div>
                                            <div class="ms-3">
                                                <div class="fs-5 fw-bold text-gray-900 me-1">Quản Trị Viên</div>
                                                <span class="text-muted fs-7 mb-1">${moment(value.createdAt).fromNow()}</span>
                                            </div>
                                        </div>
                                        <div class="p-5 rounded bg-secondary text-dark fw-bold mw-lg-450px text-start" data-kt-element="message-text">${value.content}</div>
                                    </div>
                                </div>`
                                }
                            </div>
                        </div>
                       `;
                    $(".syncMessage").append(messageHtml)
                });

                const formHtml = `
                    <div class="card-footer p-0 pt-3" id="kt_chat_messenger_footer">
                        <div class="form-message">
                            <form id="frm-send-message" method="post">
                                <input type="hidden" name="commandId" value="${commandId}">
                                <div class="group-message">
                                    <div class="item item-message">
                                        <input class="form-control ui-autocomplete-input" placeholder="Type your message" name="content" autocomplete="off">
                                    </div>
                                    <div class="col-button">
                                        <button type="submit" class="btn btn-send-message btn-message"><i class="fa-solid fa-paper-plane"></i></button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>`;
                $(".syncMessage").append(formHtml);

                $("#syncMessage").modal('show');
            }
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}

$(document).on("submit", "#frm-send-message", (e) => {
    e.preventDefault();

    KTApp.showPageLoading();

    axios.post("/dapi/composite/v1/private/tickets/send", {
        commandId: $(e.target).find("input[name=commandId]").val(),
        content: $(e.target).find("input[name=content]").val(),
    }).then((response) => {
        let result = response.data;

        if(result.resultCode === 0) {
            otherTicket($(e.target).find("input[name=commandId]").val())
        } else {
            Swal.fire({
                icon: 'error',
                text: result.message,
                confirmButtonText: `OK, got it`
            });
        }
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
});

$(document).ready(function () {
    $('.menu-link').each(function () {
        let path = $(this).attr('data-href');

        if (window.location.pathname === path) {
            let parentItem = $(this).parent();

            $(this).addClass('active');

            let grandParentItem = parentItem.parent().closest('.has-child');
            if (grandParentItem.length) {
                grandParentItem.addClass('open');
                grandParentItem.find('.menu-link').eq(0).addClass('active');
                parentItem.parent().show();
            }
        }
    });
})

document.addEventListener("DOMContentLoaded", () => {
    const serviceTable = document.getElementById('service');
    if (!serviceTable) {
        return;
    }

    const addedCategories = new Set();
    const badgeClasses = ['badge-success', 'badge-primary', 'badge-danger'];

    if (typeof SERVICES === 'undefined') {
        return;
    }

    SERVICES.forEach(service => {
        let categoryRow = '';
        if (!addedCategories.has(service.cat)) {
            categoryRow = `
                <tr class="bg-light" data-cat="129" data-confirm="0">
                    <td colspan="10" class="fs-4 fw-bolder">
                        <div class="d-flex align-items-center">
                            <i class="${service.platformicon} fs-3 me-2" aria-hidden="true"></i>
                            <div class="d-flex flex-column ls-1">${service.cat}</div>
                        </div>
                    </td>
                </tr>
            `;
            addedCategories.add(service.cat);
        }

        const serviceRow = `
            <tr class="service" data-cat="129" data-confirm="0">
                <td class="ps-8">
                    <div class="d-flex align-items-center ms-2">
                        <div class="d-flex flex-column">
                            <div class="d-flex align-items-center">
                                <span class="fw-bolder me-1 ls-1">${service.id}</span> - ${service.name}
                            </div>
                            <span class="mt-1">
                                ${service.feature.map(feature => {
                                    const randomClass = badgeClasses[Math.floor(Math.random() * badgeClasses.length)];
                                    return `<span class="badge badge-outline ${randomClass} rounded-pill fs-9 me-1">${feature}</span>`;
                                }).join('')}
                            </span>
                        </div>
                    </div>
                </td>
                <td><span class="text-muted fs-7" data-bs-toggle="tooltip" data-bs-placement="top" data-kt-initialized="1"><span class="text-gray-800">${Intl.NumberFormat('en-US').format(service.min)}</span> - <span class="text-gray-800">${Intl.NumberFormat('en-US').format(service.max)}</span></span></td>
                <td><span class="fw-bold text-primary">${Intl.NumberFormat('en-US').format(service.member / currencyRate * 1000)} <sup>${currencySymbol}</sup></span> - <span class="text-gray-500">${Intl.NumberFormat('en-US').format(service.collaborators / currencyRate * 1000)} <sup>${currencySymbol}</sup></span> - <span class="text-gray-500">${Intl.NumberFormat('en-US').format(service.agency / currencyRate * 1000)} <sup>${currencySymbol}</sup></span> - <span class="text-gray-500">${Intl.NumberFormat('en-US').format(service.distributor / currencyRate * 1000)} <sup>${currencySymbol}</sup></span></td>
            </tr>
        `;

        serviceTable.insertAdjacentHTML('beforeend', categoryRow + serviceRow);
    });
});

const templateSelection = name => {
    if (!name.id) {
        return name.text;
    } else {
        return `<i class='${$(name.element).data('icon')}'></i> ${name.text}`;
    }
};

const templateSelectionRich = name => {
    if (!name.id) {
        return name.text;
    } else {
        return `<i class="${name.icon}"></i> ${name.text}`;
    }
};

const templateSelectionRichOne = service => {
    const badgeClasses = ['badge-success', 'badge-primary', 'badge-danger'];

    if (!service.id) {
        return service.name;
    }

    const features = Array.isArray(service.feature) ? service.feature : [];

    let $container = $('<div class="d-flex align-items-center"></div>');
    $container.append(`
        <div class="d-flex flex-column">
            <div class="d-flex align-items-center">
                <div class="d-flex align-items-center">
                    <i class="${service.icon} me-2" aria-hidden="true"></i>
                    <span class="badge badge-primary rounded-pill fw-bolder me-1">${service.id}</span> - ${service.name} - 
                    <span class="text-primary fw-bolder ms-1">${Intl.NumberFormat('en-US').format(service.rate / currencyRate * 1000)} ${currencySymbol}</span>
                </div>
            </div>
            <span class="mt-1">
                ${features.map(feature => {
                    const randomClass = badgeClasses[Math.floor(Math.random() * badgeClasses.length)];
                    return `<span class="badge badge-outline ${randomClass} rounded-pill fs-9 me-1">${feature}</span>`;
                }).join('')}
            </span>
        </div>
    `);
    return $container;
};

$(".sl-platform").select2({
    minimumResultsForSearch: Infinity,
    templateResult: templateSelection,
    templateSelection: templateSelection,
    escapeMarkup: m => m
});

const platform = () => {
    let platformId = $('.sl-platform').val();

    let matchingServices = SERVICES.filter(service => service.platformid === platformId);
    matchingServices.sort((a, b) => a.id - b.id);

    if (matchingServices.length > 0) {
        let uniqueCategories = {};
        let serviceOptions = [];

        matchingServices.forEach(service => {
            if (!uniqueCategories[service.catid]) {
                uniqueCategories[service.catid] = true;
                serviceOptions.push({
                    id: service.catid,
                    text: service.cat,
                    icon: service.platformicon
                });
            }
        });

        $('.sl-category').empty().select2({
            data: serviceOptions,
            minimumResultsForSearch: Infinity,
            escapeMarkup: m => m,
            templateResult: templateSelectionRich,
            templateSelection: templateSelectionRich
        });

        $(".sl-category").trigger("change");
    }
};

const category = () => {
    let categoryId = $('.sl-category').val();

    let matchingServices = SERVICES.filter(service => service.catid === categoryId);
    matchingServices.sort((a, b) => a.id - b.id);

    if (matchingServices.length > 0) {
        let uniqueServices = {};
        let serviceOptions = [];

        matchingServices.forEach(service => {
            if (!uniqueServices[service.id]) {
                uniqueServices[service.id] = true;
                serviceOptions.push({
                    id: service.id,
                    name: service.name,
                    feature: service.feature,
                    icon: service.platformicon,
                    rate: getPriceByUser(service, userType),
                    min: service.min,
                    max: service.max
                });
            }
        });

        $('.sl-service').empty().select2({
            data: serviceOptions,
            minimumResultsForSearch: Infinity,
            escapeMarkup: m => m,
            templateResult: templateSelectionRichOne,
            templateSelection: templateSelectionRichOne
        });

        $(".sl-service").trigger("change");
    }
}

const service = () => {
    let serviceId = parseInt($('.sl-service').val(), 10);
    let matchingServices = SERVICES.filter(service => service.id === serviceId);

    if (matchingServices.length > 0) {
        let serviceType = matchingServices[0].type.toLowerCase().replace(/\s/g, '-');

        $('.seo, .custom-comments, .custom-comments-package, .comment-likes, .mentions-with-hashtags, .poll, .invites-from-groups, .subscriptions').hide();
        $('.ipt-quantity').val('');

        const disableQuantityFor = [
            'custom-comments',
            'custom-comments-package',
            'subscriptions'
        ];

        if (disableQuantityFor.includes(serviceType)) {
            $(`.${serviceType}`).show();
            $('.ipt-quantity').prop('disabled', true);
        } else {
            $(`.${serviceType}`).show();
            $('.ipt-quantity').prop('disabled', false);
        }

        if (matchingServices[0].advanced.schedule) {
            $(".schedule").show();
        } else {
            $(".schedule").hide();
        }

        if (matchingServices[0].advanced.loop) {
            $(".loop").show();
        } else {
            $(".loop").hide();
        }

        $('.div-choose-service').html(`<span class="fs-3 fw-bold"><i class="${matchingServices[0].platformicon} fs-3" aria-hidden="true"></i> ${matchingServices[0].name}</span>`);
        $('.div-description').html(`${matchingServices[0].desc}`);
        $('.ipt-quantity').attr('placeholder', `Mua Tối Thiểu ${matchingServices[0].min}`);
        $('.charge').html(`0 ${currencySymbol}`);
    }
};


const schedule = () => {
    const scheduleCheckbox = document.querySelector('.cb-schedule');
    const scheduleTime = document.querySelector('.schedule-time');

    if (scheduleCheckbox.checked) {
        scheduleTime.style.display = 'block';
    } else {
        scheduleTime.style.display = 'none';
    }
}

const loop = () => {
    const loopCheckbox = document.querySelector('.cb-loop');
    const loopQuantity = document.querySelector('.loop-quantity');

    if (loopCheckbox.checked) {
        loopQuantity.style.display = 'block';
    } else {
        loopQuantity.style.display = 'none';
    }
}

$(document).ready(function () {
    platform();
    $('.sl-platform').on('change', platform);
    $('.sl-category').on('change', category);
    $('.sl-service').on('change', service);

    $(".sl-platform").trigger("change");

    $('.ipt-schedule-time').daterangepicker({
        singleDatePicker: true,
        timePicker: true,
        timePicker24Hour: true,
        timePickerSeconds: false,
        timePickerIncrement: 1,
        locale: {
            format: 'YYYY-MM-DD HH:mm:ss'
        },
        minDate: moment().startOf('minute'),
    });
})

const calculatePrice = () => {
    let quantity = $('.ipt-quantity').val();
    let comments = $('.txa-comment').val();
    let answer = $('.ipt-answer-number').val();
    let posts = $('.ipt-posts').val();
    let oldPosts = $('.ipt-old-posts').val();
    let min = $('.ipt-min').val();
    let max = $('.ipt-max').val();
    let delay = $('.sl-delay').val();
    let expiry = $('.sl-expiry').val();
    let loop = $('.cb-loop:checked').length > 0 ? 1 : 0;
    let loop_quantity = $('.sl-loop-quantity').val();

    const service = SERVICES.find(service => service.id === parseInt($('.sl-service').val(), 10));
    if (!service) {
        $(".charge").html(`0 ${currencySymbol}`);
        return;
    }

    const price = getPriceByUser(service, userType);
    let payment = 0;

    switch (service.type) {
        case "Default":
        case "Package":
        case "Comment Likes":
        case "Invites from Groups":
        case "SEO":
        case "Mentions with Hashtags":
            payment = quantity * price;
        break;
        case "Custom Comments":
        case "Custom Comments Package":
            let commentLines = comments.split('\n').length;
            payment = commentLines * price;
            $('.ipt-quantity').val(commentLines);
        break;
        case "Poll":
            payment = quantity * answer * price;
        break;
    }

    if (loop) {
        payment = quantity * loop_quantity * price;
    }

    $(".charge").html(`${Intl.NumberFormat('en-US').format(payment / currencyRate)} ${currencySymbol}`);
};

const getPriceByUser = (service, userType) => {
    switch (userType) {
        case "member":
            return service.member;
        case "collaborators":
            return service.collaborators;
        case "agency":
            return service.agency;
        case "distributor":
            return service.distributor;
        default:
            return null;
    }
};

const order = () => {
    KTApp.showPageLoading();

    $.ajax({
        url: URL_REQUEST,
        type: 'POST',
        data: {
            action: "order",
            sid: parseInt($('.sl-service').val(), 10),
            link: $('.ipt-link').val(),
            quantity: $('.ipt-quantity').val(),
            username: $('.ipt-username').val(),
            comments: $('.txa-comment').val(),
            keywords: $('.txa-keywords').val(),
            usernames: $('.txa-usernames').val(),
            hashtags: $('.txa-hashtags').val(),
            answer_number: $('.ipt-answer-number').val(),
            groups: $('.txa-groups').val(),
            posts: $('.ipt-posts').val(),
            old_posts: $('.ipt-old-posts').val(),
            min: $('.ipt-min').val(),
            max: $('.ipt-max').val(),
            delay: $('.sl-delay').val(),
            expiry: $('.sl-expiry').val(),
            schedule: $('.cb-schedule:checked').length > 0 ? 1 : 0,
            schedule_time: $('.ipt-schedule-time').val(),
            loop: $('.cb-loop:checked').length > 0 ? 1 : 0,
            loop_quantity: $('.sl-loop-quantity').val(),
            loop_spacing: $('.sl-loop-spacing').val()
        },
        success: (response) => {
            const alertOrder = $(".alert-order");
            alertOrder
                .removeClass('bg-danger bg-success')
                .addClass(response.resultCode === 200 ? 'bg-success' : 'bg-danger')
                .html(response.resultCode === 200 ? response.message : `${response.message}`)
                .show();

            if (response.resultCode === 200) {
                $('.ipt-link').val('');
            }
        },
        error: (err) => {
            $(".alert-order")
                .removeClass('bg-success')
                .addClass('bg-danger')
                .html(err.message || err)
                .show();
        },
        complete: () => {
            KTApp.hidePageLoading();
        }
    });
};

const bulkOrder = () => {
    KTApp.showPageLoading();

    let dataForm = $('.txa-bulk-order').val();
    let lines = dataForm.split('\n');

    const sendLine = (lineIndex) => {
        if (lineIndex >= lines.length) {
            KTApp.hidePageLoading();
            return;
        }

        let line = lines[lineIndex].trim();

        if (!line) {
            sendLine(lineIndex + 1);
            return;
        }

        let parts = line.split('|');
        let sid = parts[0] ? parts[0].trim() : '';
        let link = parts[1] ? parts[1].trim() : '';
        let quantity = parts[2] ? parts[2].trim() : '';
        let username = parts[3] ? parts[3].trim() : '';
        let comments = parts[4] ? parts[4].trim() : '';
        let keywords = parts[5] ? parts[5].trim() : '';
        let usernames = parts[6] ? parts[6].trim() : '';
        let hashtags = parts[7] ? parts[7].trim() : '';
        let answer_number = parts[8] ? parts[8].trim() : '';
        let groups = parts[9] ? parts[9].trim() : '';

        $.ajax({
            url: URL_REQUEST,
            type: 'POST',
            data: {
                action: "order",
                sid: sid,
                link: link,
                quantity: quantity,
                username: username,
                comments: comments,
                keywords: keywords,
                usernames: usernames,
                hashtags: hashtags,
                answer_number: answer_number,
                groups: groups,
            },
            success: (response) => {
                const tableBody = $(".table-log-bulk tbody");
                const rowClass = response.resultCode === 200 ? "text-success" : "text-danger";
                const row = `<tr class="${rowClass}"><td class="wrap">${sid}</td><td class="wrap">${response.message}</td></tr>`;
                tableBody.append(row);
                $(".table-log-bulk").show();
            },
            error: (err) => {
                const tableBody = $(".table-log-bulk tbody");
                const row = `<tr class="text-danger"><td class="wrap">${sid}</td><td class="wrap">${err.responseText || err.statusText || err}</td></tr>`;
                tableBody.append(row);
                $(".table-log-bulk").show();
            },
            complete: () => {
                setTimeout(() => {
                    sendLine(lineIndex + 1);
                }, 500);
            }
        });
    };

    sendLine(0);
};

$(document).on("click", ".qty-minus", (function() {
    $(this).next().val() > 0 && $(this).next().val(+$(this).next().val() - 1)
}))

$(document).on("click", ".qty-plus", (function() {
    $(this).prev().val(+$(this).prev().val() + 1)
}))

const checkPrice = () => {
    let subKioskId = $('input[name="subKioskId"]:checked');
    let priceKiosk = subKioskId.data('price');

    $(".priceProduct").html(`${Intl.NumberFormat("en-US", { minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(priceKiosk / currencyRate)}`);
}

$('.form-order').submit(function (e) {
    e.preventDefault();

    KTApp.showPageLoading();

    let subKioskId = $('input[name="subKioskId"]:checked');
    let objectType = subKioskId.data('object');
    let quantity = $('input[name="quantity"]').val();

    let action = $(this).attr("action");
    let redirect = $(this).attr("redirect");

    axios.post(action, {
        objectType: objectType,
        quantity: quantity
    }).then(response => {
        swal(
            response.data.message,
            response.data.resultCode === 0 ? "success" : "error"
        );
        if (response.data.resultCode === 0) {
            setTimeout(() => {
                if (!redirect) {
                    window.location.reload();
                    return;
                }
                window.location.href = redirect;
            }, 2000);
        }
    }).catch(error => {
        swal(error.message || error, "error")
    })
    .finally(() => {
        KTApp.hidePageLoading();
    });
});

$(document).ready(function () {
    if (document.cookie.indexOf("modalClosed=true") === -1) {
        $('#modal-notification').modal('show')
    }
    $('#closeModalBtn').on('click', function() {
        $('#modal-notification').modal('hide')
        document.cookie = "modalClosed=true; expires=" + new Date(new Date().getTime() + 30 * 60 * 1000).toUTCString();
    });
})

const createDomain = () => {
    KTApp.showPageLoading();

    axios.post(URL_REQUEST, {
        action: "childpanel",
        name: $('.ipt-domain').val(),
    }).then((response) => {
        let result = response.data;
        
        result.resultCode === 0 ? Swal.fire({
            icon: 'success',
            text: result.message,
            confirmButtonText: `OK, got it`
        }) && setTimeout(() => window.location.href = result.extraData.redirectUrl, 1000) : Swal.fire({
            icon: 'error',
            text: result.message,
            confirmButtonText: `OK, got it`
        })
    })
    .catch((err) => {
        Swal.fire({
            icon: 'error',
            text: err.message || err,
            confirmButtonText: `OK, got it`
        });
    })
    .finally(() => KTApp.hidePageLoading());
}